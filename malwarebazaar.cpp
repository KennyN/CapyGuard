#include "malwarebazaar.hpp"
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <iostream>

// Function to write the response from libcurl into a string
static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

void check_malwarebazaar(const std::string& file_hash) {
    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    curl = curl_easy_init();
    if(curl) {
        std::string url = "https://mb-api.abuse.ch/api/v1/";
        std::string post_fields = "query=get_info&hash=" + file_hash;

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, post_fields.c_str());
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        res = curl_easy_perform(curl);
        if(res != CURLE_OK)
            std::cerr << "curl_easy_perform() failed: " << curl_easy_strerror(res) << std::endl;

        curl_easy_cleanup(curl);

        if (res == CURLE_OK) {
            // Parse the JSON response
            auto json_response = nlohmann::json::parse(readBuffer);
            if (json_response["query_status"] == "ok") {
                std::cout << "File Hash: " << file_hash << std::endl;
                std::cout << "File Type: " << json_response["data"][0]["file_type"] << std::endl;
                std::cout << "Malware Family: " << json_response["data"][0]["signature"] << std::endl;
                std::cout << "This file is flagged as malicious." << std::endl;
            } else {
                std::cout << "No data available for this hash." << std::endl;
            }
        }
    }
}
